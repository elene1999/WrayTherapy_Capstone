import { JetLagTouchReceiver, JetLagTouchScreen } from "../support/Interfaces";
import 'hammerjs';

/**
 * TouchScreen abstracts away how gestures (pan, swipe, tap, rotate, pinch,
 * press) are generated by the device, and simply passes gesture events to
 * whatever object has subscribed to it.
 *
 * Based on how JetLag is designed, we can get by with a single subscriber for
 * each gesture event
 */
export class HtmlTouchScreen implements JetLagTouchScreen {
    /** The DOM element that receives gesture events */
    private elt: HTMLElement;

    /**
     * Create a TouchScreen by providing the name of an HTML element (typically
     * a DIV) that should begin receiving gestures.  Note that gestures will not
     * be handled until a TouchReceiver is provided.
     * 
     * @param domId The Id of the DOM element that will receive gesture events
     */
    constructor(domId: string) {
        this.elt = document.getElementById(domId);
    }

    /** 
     * Set up the gesture events so that they get forwarded to the provided
     * receiver.
     *
     * @param receiver The object that should handle gestures
     */
    public setTouchReceiver(receiver: JetLagTouchReceiver) {
        // Since we are using gestures, turn off left clicking of the whole page
        this.elt.oncontextmenu =
            function (this: HTMLElement, ev: PointerEvent) { return false; } as any;

        // Set up handlers for all the Hammer events
        let hammer = new Hammer(this.elt);
        hammer.on('tap', (ev: HammerInput) => {
            let e = ev.srcEvent as PointerEvent;
            receiver.tap(e.offsetX, e.offsetY);
        });
        hammer.get('pan').set({ direction: Hammer.DIRECTION_ALL });
        hammer.on('panstart', (ev: HammerInput) => {
            let e = ev.srcEvent as PointerEvent;
            receiver.panStart(e.offsetX, e.offsetY);
        });
        hammer.on('panmove', (ev: HammerInput) => {
            let e = ev.srcEvent as PointerEvent;
            receiver.panMove(e.offsetX, e.offsetY);
        });
        hammer.on('panend', (ev: HammerInput) => {
            let e = ev.srcEvent as PointerEvent;
            receiver.panStop(e.offsetX, e.offsetY);
        });
        hammer.on('pancancel', (ev: HammerInput) => {
            let e = ev.srcEvent as PointerEvent;
            receiver.panStop(e.offsetX, e.offsetY);
        });

        // this gets us 'downpress' and 'release'.  See "input events" on
        // http://hammerjs.github.io/api/
        hammer.on("hammer.input", (ev: HammerInput) => {
            if (ev.eventType == 1) {
                let e = ev.srcEvent as PointerEvent;
                receiver.touchDown(e.offsetX, e.offsetY);
            }
            else if (ev.eventType == 4) {
                let e = ev.srcEvent as PointerEvent;
                receiver.touchUp(e.offsetX, e.offsetY);
            }
        });
        // NB: swipe also registers pans.
        // NB: there is also swipeup, swipeleft, swiperight, swipedown
        hammer.on('swipe', (ev: HammerInput) => {
            receiver.swipe(ev.center.x - ev.deltaX, ev.center.y - ev.deltaY,
                ev.center.x, ev.center.y, ev.deltaTime);
        });
        hammer.get('swipe').set({ direction: Hammer.DIRECTION_ALL });
    }
}